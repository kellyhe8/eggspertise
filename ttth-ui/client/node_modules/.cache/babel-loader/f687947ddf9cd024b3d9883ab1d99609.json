{"ast":null,"code":"var _jsxFileName = \"/Users/donaldliu/Documents/GitHub/talktothehand/ttth-ui/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  useEffect(() => {\n    async function loadModel() {\n      console.log(\"[+] Application started\"); //Wait for tensorflow module to be ready\n\n      const tfReady = await tf.ready();\n      console.log(\"[+] Loading custom mask detection model\"); //Replce model.json and group1-shard.bin with your own custom model\n\n      const modelJson = await require(\"./assets/model/model.json\");\n      const modelWeight = await require(\"./assets/model/group1-shard.bin\");\n      const maskDetector = await tf.loadLayersModel(bundleResourceIO(modelJson, modelWeight));\n      console.log(\"[+] Loading pre-trained face detection model\"); //Blazeface is a face detection model provided by Google\n\n      const faceDetector = await blazeface.load(); //Assign model to variable\n\n      setMaskDetector(maskDetector);\n      setFaceDetector(faceDetector);\n      console.log(\"[+] Model Loaded\");\n    }\n\n    loadModel();\n  }, []);\n\n  function imageToTensor(rawImageData) {\n    //Function to convert jpeg image to tensors\n    const TO_UINT8ARRAY = true;\n    const {\n      width,\n      height,\n      data\n    } = jpeg.decode(rawImageData, TO_UINT8ARRAY); // Drop the alpha channel info for mobilenet\n\n    const buffer = new Uint8Array(width * height * 3);\n    let offset = 0; // offset into original data\n\n    for (let i = 0; i < buffer.length; i += 3) {\n      buffer[i] = data[offset];\n      buffer[i + 1] = data[offset + 1];\n      buffer[i + 2] = data[offset + 2];\n      offset += 4;\n    }\n\n    return tf.tensor3d(buffer, [height, width, 3]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"src/App.js\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 16\n        }, this), \" and save to reload.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        className: \"App-link\",\n        href: \"https://reactjs.org\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Learn React\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/donaldliu/Documents/GitHub/talktothehand/ttth-ui/client/src/App.js"],"names":["logo","App","useEffect","loadModel","console","log","tfReady","tf","ready","modelJson","require","modelWeight","maskDetector","loadLayersModel","bundleResourceIO","faceDetector","blazeface","load","setMaskDetector","setFaceDetector","imageToTensor","rawImageData","TO_UINT8ARRAY","width","height","data","jpeg","decode","buffer","Uint8Array","offset","i","length","tensor3d"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n  useEffect(() => {\n    async function loadModel(){\n      console.log(\"[+] Application started\")\n      //Wait for tensorflow module to be ready\n      const tfReady = await tf.ready();\n      console.log(\"[+] Loading custom mask detection model\")\n      //Replce model.json and group1-shard.bin with your own custom model\n      const modelJson = await require(\"./assets/model/model.json\");\n      const modelWeight = await require(\"./assets/model/group1-shard.bin\");\n      const maskDetector = await tf.loadLayersModel(bundleResourceIO(modelJson,modelWeight));\n      console.log(\"[+] Loading pre-trained face detection model\")\n      //Blazeface is a face detection model provided by Google\n      const faceDetector =  await blazeface.load();\n      //Assign model to variable\n      setMaskDetector(maskDetector)\n      setFaceDetector(faceDetector)\n      console.log(\"[+] Model Loaded\")\n    }\n    loadModel()\n  }, []); \n\n  function imageToTensor(rawImageData){\n    //Function to convert jpeg image to tensors\n    const TO_UINT8ARRAY = true;\n    const { width, height, data } = jpeg.decode(rawImageData, TO_UINT8ARRAY);\n    // Drop the alpha channel info for mobilenet\n    const buffer = new Uint8Array(width * height * 3);\n    let offset = 0; // offset into original data\n    for (let i = 0; i < buffer.length; i += 3) {\n      buffer[i] = data[offset];\n      buffer[i + 1] = data[offset + 1];\n      buffer[i + 2] = data[offset + 2];\n      offset += 4;\n    }\n    return tf.tensor3d(buffer, [height, width, 3]);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}